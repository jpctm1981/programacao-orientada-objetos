Trabalhando com Branches.

Ao criar branches,  o Git não armazena dados como uma série de mudanças ou deltas, mas sim como uma série de snapshots. Quando um commit é feito no Git, o Git guarda um objeto commit que contém um ponteiro para o snapshot do conteúdo que foi colocado pelo usuário na área de seleção, o autor e os metadados da mensagem, zero ou mais ponteiros para o commit ou commits que são pais deste commit: nenhum pai para o commit inicial, um pai para um commit normal e múltiplos pais para commits que resultem de um merge de dois ou mais branches.
Para visualizar isso, vamos supor que o usuário tenha um diretório contendo três arquivos, e colocou todos eles na área de seleção e fez o commit. Colocar na área de seleção cria o checksum de cada arquivo, armazena esta versão do arquivo no repositório Git (o Git se refere a eles como blobs), e acrescenta este checksum à área de seleção.
Ao criar um commit executando git commit, o Git calcula o checksum de cada subdiretório (neste caso, apenas o diretório raiz do projeto) e armazena os objetos de árvore no repositório Git. O Git em seguida, cria um objeto commit que tem os metadados e um ponteiro para a árvore do projeto raiz, então ele pode recriar este snapshot quando necessário.
O repositório Git agora contém cinco objetos: um blob para o conteúdo de cada um dos três arquivos, uma árvore que lista o conteúdo do diretório e especifica quais nomes de arquivos são armazenados em quais blobs, e um commit com o ponteiro para a raiz dessa árvore com todos os metadados do commit. 
Se após alguma modificações, for feito um novo commit, o próximo commit armazenará um ponteiro para o commit imediatamente anterior. 
Um branch no Git é simplesmente um leve ponteiro móvel para um desses commits. O nome do branch padrão no Git é master. Ao fazer os commits, teremos um branch principal (master branch) que aponta para o último commit feito, e que avança automaticamente a cada commit.
Ao criarmos um novo branch, um novo ponteiro ponteiro é criada para permitir a “movimentação” entre um commit e outro. Para criarmos um novo branch, usamos o comando git branch <nome>. Para saber qual o branch atual, o Git mantém um ponteiro especial chamado HEAD. O comando git branch cria um novo branch, mas o ponteiro HEAD permanece no branch master. Para mudar para um branch existente, você executa o comando git checkout, 

Esse comando fez duas coisas. Ele alterou o ponteiro HEAD para apontar novamente para o branch master, e reverteu os arquivos em seu diretório de trabalho para o estado em que estavam no snapshot para o qual o master apontava. Isto significa também que as mudanças feitas a partir deste ponto em diante, irão divergir de uma versão anterior do projeto. Ele essencialmente "volta" o trabalho que você fez no seu branch testing, temporariamente, de modo que você possa ir em uma direção diferente.
